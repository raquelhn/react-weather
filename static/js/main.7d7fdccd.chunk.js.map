{"version":3,"sources":["components/contentCard.js","components/refreshButton.js","App.js","reportWebVitals.js","index.js"],"names":["ContentCard","weatherData","Card","centered","color","raised","Content","Header","className","Divider","section","Description","results","sunrise","sunset","RefreshButton","Button","inverted","circular","icon","onClick","window","location","reload","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","console","log","fetchData","as","textAlign","longtitude","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAoBeA,EAjBK,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OAClB,cAACC,EAAA,EAAD,CAAMC,UAAQ,EACZC,MAAM,SACNC,OAAO,OAFT,SAIE,eAACH,EAAA,EAAKI,QAAN,WACI,cAACJ,EAAA,EAAKK,OAAN,CAAaC,UAAU,YAAvB,uDACA,cAACC,EAAA,EAAD,CAASC,SAAO,IAChB,eAACR,EAAA,EAAKS,YAAN,WACA,oBAAGH,UAAU,YAAb,sBAAmCP,EAAYW,QAAQC,WACvD,oBAAGL,UAAU,YAAb,qBAAkCP,EAAYW,QAAQE,mB,SCE/CC,EAZO,WAKlB,OACI,8BACA,cAACC,EAAA,EAAD,CAAQR,UAAU,SAASS,UAAQ,EAACb,MAAM,OAAOc,UAAQ,EAACC,KAAK,UAAUC,QAN/D,WACVC,OAAOC,SAASC,e,SCwDTC,MApDf,WAAe,MAESC,mBAAS,IAFlB,mBAENC,EAFM,KAEDC,EAFC,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIWJ,mBAAS,IAJpB,mBAINK,EAJM,KAIAC,EAJA,KAkCb,OAzBAC,qBAAU,YAEO,uCAAG,sBAAAC,EAAA,6DAEhBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDV,EAAOU,EAASC,OAAOC,UACvBV,EAAQQ,EAASC,OAAOE,cAJV,SASZC,MAAM,GAAD,OAda,sCAcb,gBAA6Bf,EAA7B,gBAAwCE,EAAxC,gBACVc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJZ,EAAQY,GACRE,QAAQC,IAAIH,MAbI,2CAAH,qDAiBfI,KACC,CAACrB,EAAKE,IAMP,sBAAKpB,UAAU,MAAf,UAEE,cAACD,EAAA,EAAD,CAASyC,GAAG,KAAKC,UAAU,SAA3B,sBAEA,cAAC,EAAD,IACyB,oBAAhBnB,EAAKlB,QACZ,cAAC,EAAD,CAAaX,YAAa6B,EAAMS,SAAUb,EAAKwB,WAAYtB,IAE3D,4BCxCOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7d7fdccd.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Divider} from 'semantic-ui-react'\n\nconst ContentCard = ({weatherData}) => (\n  <Card centered\n    color='purple'\n    raised='true'\n  >\n    <Card.Content>\n        <Card.Header className=\"text-card\">Sunrise and Sunset times in your location</Card.Header>\n        <Divider section />\n        <Card.Description>\n        <p className=\"text-card\">Sunrise: {weatherData.results.sunrise}</p>\n        <p className=\"text-card\">Sunset: {weatherData.results.sunset}</p>\n        </Card.Description>\n        \n    </Card.Content>\n  </Card>\n)\n\nexport default ContentCard;","import React from 'react';\nimport { Button } from 'semantic-ui-react'\n\nconst RefreshButton = () => {\n    const refresh=()=>{\n        window.location.reload();\n    }\n\n    return(\n        <div>\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\n        </div>\n    )\n}\n\nexport default RefreshButton;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport ContentCard from './components/contentCard';\nimport RefreshButton from './components/refreshButton';\nimport {Header} from 'semantic-ui-react'\n\n\n\n\nfunction App() {\n  //for the location of the user\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  const REACT_APP_API_URL = 'https://api.sunrise-sunset.org/json';\n\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n      //its getting the location of the user\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });  \n    \n    \n    //its fetching the weather data once the location is found\n    await fetch(`${REACT_APP_API_URL}?lat=${lat}&lon=${long}&date=today`)\n    .then(res => res.json())\n    .then(res => {\n      setData(res)\n      console.log(res)\n     \n    });\n  }\n    fetchData();\n  }, [lat, long]);\n\n\n\n \n  return (\n    <div className='App'>\n     \n      <Header  as='h1' textAlign='center'>Welcome </Header> \n      \n      <RefreshButton />\n      {(typeof data.results != 'undefined') ? (\n        <ContentCard weatherData={data} latitude={lat} longtitude={long} />\n      ): (\n        <div></div>\n      )}\n  \n      \n  </div>\n  );\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}